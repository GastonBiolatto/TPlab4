// <auto-generated />
using System;
using Bomberosfinallab.Repos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bomberosfinallab.Migrations
{
    [DbContext(typeof(BomberosContext))]
    [Migration("20231118003934_migrationuno")]
    partial class migrationuno
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("tpfinal.Models.Asistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContAsistencia")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int?>("CuerpoActivoRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuerpoActivoRefId");

                    b.ToTable("Asistencia");
                });

            modelBuilder.Entity("tpfinal.Models.CuerpoActivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<int?>("DepartamentoRefId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Nro")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoRefId");

                    b.ToTable("CuerpoActivo");
                });

            modelBuilder.Entity("tpfinal.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("tpfinal.Models.Equipamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoRefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRevicion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoRefId");

                    b.ToTable("Equipamiento");
                });

            modelBuilder.Entity("tpfinal.Models.Unidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaRevicion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("tpfinal.Models.Asistencia", b =>
                {
                    b.HasOne("tpfinal.Models.CuerpoActivo", "CuerpoActivo")
                        .WithMany()
                        .HasForeignKey("CuerpoActivoRefId");

                    b.Navigation("CuerpoActivo");
                });

            modelBuilder.Entity("tpfinal.Models.CuerpoActivo", b =>
                {
                    b.HasOne("tpfinal.Models.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoRefId");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("tpfinal.Models.Equipamiento", b =>
                {
                    b.HasOne("tpfinal.Models.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });
#pragma warning restore 612, 618
        }
    }
}
